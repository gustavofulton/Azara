(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('apollo-client-rxjs'), require('apollo-client'), require('rxjs/observable/from'), require('rxjs/observable/fromPromise')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/core', 'apollo-client-rxjs', 'apollo-client', 'rxjs/observable/from', 'rxjs/observable/fromPromise'], factory) :
	(factory((global.ng = global.ng || {}, global.ng.apollo = global.ng.apollo || {}),global.ng.core,global.apollo.rxjs,global.apollo,global.Rx.Observable,global.Rx.Observable));
}(this, (function (exports,_angular_core,apolloClientRxjs,apolloClient,rxjs_observable_from,rxjs_observable_fromPromise) { 'use strict';

var SelectPipe = (function () {
    function SelectPipe() {
    }
    /**
     * @param {?} obj
     * @param {?=} name
     * @return {?}
     */
    SelectPipe.prototype.transform = function (obj, name) {
        if (name === void 0) { name = ''; }
        if (obj && name !== '') {
            // for Apollo decorator
            if (obj[name]) {
                return obj[name];
            }
            // for Angular2Apollo.watchQuery
            if (obj.data && obj.data[name]) {
                return obj.data[name];
            }
        }
    };
    SelectPipe.decorators = [
        { type: _angular_core.Pipe, args: [{
                    name: 'select',
                },] },
    ];
    /** @nocollapse */
    SelectPipe.ctorParameters = function () { return []; };
    return SelectPipe;
}());

var __extends = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ApolloQueryObservable = (function (_super) {
    __extends(ApolloQueryObservable, _super);
    function ApolloQueryObservable() {
        _super.apply(this, arguments);
    }
    return ApolloQueryObservable;
}(apolloClientRxjs.RxObservableQuery));

var Angular2Apollo = (function () {
    /**
     * @param {?} client
     */
    function Angular2Apollo(client) {
        this.client = client;
    }
    /**
     * @param {?} options
     * @return {?}
     */
    Angular2Apollo.prototype.watchQuery = function (options) {
        return new ApolloQueryObservable(apolloClientRxjs.rxify(this.client.watchQuery)(options));
    };
    /**
     * @param {?} options
     * @return {?}
     */
    Angular2Apollo.prototype.query = function (options) {
        return rxjs_observable_fromPromise.fromPromise(this.client.query(options));
    };
    /**
     * @param {?} options
     * @return {?}
     */
    Angular2Apollo.prototype.mutate = function (options) {
        return rxjs_observable_fromPromise.fromPromise(this.client.mutate(options));
    };
    /**
     * @param {?} options
     * @return {?}
     */
    Angular2Apollo.prototype.subscribe = function (options) {
        return rxjs_observable_from.from(this.client.subscribe(options));
    };
    /**
     * @return {?}
     */
    Angular2Apollo.prototype.getClient = function () {
        return this.client;
    };
    Angular2Apollo.decorators = [
        { type: _angular_core.Injectable },
    ];
    /** @nocollapse */
    Angular2Apollo.ctorParameters = function () { return [
        { type: apolloClient.ApolloClient, },
    ]; };
    return Angular2Apollo;
}());

var APOLLO_CLIENT_WRAPPER = new _angular_core.OpaqueToken('apollo/client-wrapper');
var APOLLO_CLIENT_INSTANCE = new _angular_core.OpaqueToken('apollo/client-instance');

var APOLLO_DIRECTIVES = [
    SelectPipe,
];
var APOLLO_PROVIDERS = [
    provideAngular2Apollo(),
];
/**
 * @return {?}
 */
function provideAngular2Apollo() {
    return {
        provide: Angular2Apollo,
        useFactory: createAngular2Apollo,
        deps: [APOLLO_CLIENT_INSTANCE],
    };
}
/**
 * @param {?} client
 * @return {?}
 */
function createAngular2Apollo(client) {
    return new Angular2Apollo(client);
}
/**
 * @param {?} clientFn
 * @return {?}
 */
function getApolloClient(clientFn) {
    return clientFn();
}
/**
 * @param {?} clientFn
 * @return {?}
 */
function defaultApolloClient(clientFn) {
    return [{
            provide: APOLLO_CLIENT_WRAPPER,
            useValue: clientFn,
        }, {
            provide: APOLLO_CLIENT_INSTANCE,
            useFactory: getApolloClient,
            deps: [APOLLO_CLIENT_WRAPPER],
        }];
}
var ApolloModule = (function () {
    function ApolloModule() {
    }
    /**
     * @param {?} clientFn
     * @return {?}
     */
    ApolloModule.withClient = function (clientFn) {
        return {
            ngModule: ApolloModule,
            providers: [
                APOLLO_PROVIDERS,
                defaultApolloClient(clientFn),
            ],
        };
    };
    ApolloModule.decorators = [
        { type: _angular_core.NgModule, args: [{
                    declarations: APOLLO_DIRECTIVES,
                    exports: APOLLO_DIRECTIVES,
                },] },
    ];
    /** @nocollapse */
    ApolloModule.ctorParameters = function () { return []; };
    return ApolloModule;
}());

exports.SelectPipe = SelectPipe;
exports.Angular2Apollo = Angular2Apollo;
exports.ApolloQueryObservable = ApolloQueryObservable;
exports.ApolloModule = ApolloModule;
exports.APOLLO_PROVIDERS = APOLLO_PROVIDERS;
exports.APOLLO_DIRECTIVES = APOLLO_DIRECTIVES;
exports.defaultApolloClient = defaultApolloClient;

Object.defineProperty(exports, '__esModule', { value: true });

})));
